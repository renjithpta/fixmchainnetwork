"use strict";
/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CargoItemType = exports.MeteorologicalEnvironment = exports.CargoItem = exports.PackageGroupType = exports.AircraftTransportFormation = exports.RouteConstraint = exports.AircraftMovementIdentification = exports.AircraftMovementEmergency = exports.AircraftMovementConstraint = exports.DinDinghy = exports.AircraftMovementType = exports.AircraftMovementRuleType = exports.ScheduledAircraftMovement = exports.RouteSegment = exports.AircraftMovementRoute = exports.AirJetty = exports.PierFacility = exports.PassengerGateInstruction = exports.PassengerBoardingStatus = exports.GateFacilityOperationalTimes = exports.StaffReadinessStatus = exports.AirportFacility = exports.WakeTurbulenceCategory = exports.AircraftTransportType = exports.AircraftTransport = exports.AircraftMovementCodeShare = exports.AircraftMovement = exports.AircraftMovementMeasure = exports.OperationalTimes = exports.PaxCount = exports.PaxCountExtension = exports.FlightArrivalInformation1 = exports.FlightDepartureInformation1 = exports.FlightArrivalInformation = exports.FlightDepartureInformation = exports.FlightNumber1 = exports.FlightNumber = exports.ACRISFlight = void 0;
/**
 * The flight in stp app services
 */
class ACRISFlight {
}
exports.ACRISFlight = ACRISFlight;
/**
 * The flight's operating flightNumber
 */
class FlightNumber {
}
exports.FlightNumber = FlightNumber;
/**
 * The status representation of a flight
 */
class FlightNumber1 {
}
exports.FlightNumber1 = FlightNumber1;
/**
 * The departure infomation for the flight
 */
class FlightDepartureInformation {
}
exports.FlightDepartureInformation = FlightDepartureInformation;
/**
 * The arrival information for the flight
 */
class FlightArrivalInformation {
}
exports.FlightArrivalInformation = FlightArrivalInformation;
/**
 * The departure infomation for the flight
 */
class FlightDepartureInformation1 {
}
exports.FlightDepartureInformation1 = FlightDepartureInformation1;
/**
 * The arrival information for the flight
 */
class FlightArrivalInformation1 {
}
exports.FlightArrivalInformation1 = FlightArrivalInformation1;
/**
 * passenger and bag counts associated with the flight
 */
class PaxCountExtension {
}
exports.PaxCountExtension = PaxCountExtension;
/**
 * Individual Passenger count statistic
 */
class PaxCount {
}
exports.PaxCount = PaxCount;
/**
 * Information about the operational times for the aircraft movement/flight
 */
class OperationalTimes {
}
exports.OperationalTimes = OperationalTimes;
/**
 * Information that enable a Party to track the performance of the Aircraft Movement.
 */
class AircraftMovementMeasure {
}
exports.AircraftMovementMeasure = AircraftMovementMeasure;
/**
 * Information about the Aircraft Movement/Flight
 */
class AircraftMovement {
}
exports.AircraftMovement = AircraftMovement;
/**
 * Information about the Code Shares for the flight
 */
class AircraftMovementCodeShare {
}
exports.AircraftMovementCodeShare = AircraftMovementCodeShare;
/**
 * Information about the Aircraft (Aircraft Transport) used in the Aircraft Movement/Flight
 */
class AircraftTransport {
}
exports.AircraftTransport = AircraftTransport;
/**
 * Type of aircraft transport
 */
class AircraftTransportType {
}
exports.AircraftTransportType = AircraftTransportType;
/**
 * Wake turbulence category
 * The message shall indicate the wake turbulence category of that aircraft type. The IFPS shall accept only the following 4 wake turbulence categories:
 * L (light), M (medium), H (heavy) or J (super).
 * L Shall be inserted for an aircraft with a maximum certified take off mass of 7000 kg or less.
 * M Shall be inserted for an aircraft with a maximum certified take off mass of less than 136000 kg but more than 7000 kg.
 * H Shall be inserted for an aircraft with a maximum certified take off mass of less than 560000kg but more than 136000 kg.
 * J Shall be inserted for an aircraft with a maximum certified take off mass of 560000kg or more.
 */
class WakeTurbulenceCategory {
}
exports.WakeTurbulenceCategory = WakeTurbulenceCategory;
/**
 * Information about the Host Airport
 */
class AirportFacility {
}
exports.AirportFacility = AirportFacility;
/**
 * Information about the status of staff readiness for operating the gate.
 */
class StaffReadinessStatus {
}
exports.StaffReadinessStatus = StaffReadinessStatus;
/**
 * Information about the operational times for the Gate Facility
 */
class GateFacilityOperationalTimes {
}
exports.GateFacilityOperationalTimes = GateFacilityOperationalTimes;
/**
 * Information about the status of passenger boarding
 */
class PassengerBoardingStatus {
}
exports.PassengerBoardingStatus = PassengerBoardingStatus;
/**
 * Information about the instructions given to passengers about how to proceed at Airport gates.
 */
class PassengerGateInstruction {
}
exports.PassengerGateInstruction = PassengerGateInstruction;
/**
 * A terminal pier infrastructure facility is a raised structure, including bridge and building supports and walkways, typically supported by widely spread piles or pillars.
 */
class PierFacility {
}
exports.PierFacility = PierFacility;
/**
 * A structure used at airports that allows aircraft passengers to board and unboard a plane to the airport's gate.
 */
class AirJetty {
}
exports.AirJetty = AirJetty;
/**
 * Information about the Route of the Aircraft Movement
 */
class AircraftMovementRoute {
}
exports.AircraftMovementRoute = AircraftMovementRoute;
/**
 * Information about the Route of the Aircraft Movement
 */
class RouteSegment {
}
exports.RouteSegment = RouteSegment;
/**
 * Information about the scheduled Aircraft Movement/Flight, often known as the Flight Plan for a specific aircraft movement.
 */
class ScheduledAircraftMovement {
}
exports.ScheduledAircraftMovement = ScheduledAircraftMovement;
/**
 * The type of flight rule that a pilot intends to fly. ICAO Doc 4444.
 * I if it is intended that the entire flight will be operated under the IFR
 * V if it is intended that the entire flight will be operated under the VFR
 * Y if the flight initially will be operated under the IFR, followed by one or more subsequent changes of flight rules
 * Z if the flight initially will be operated under the VFR, followed by one or more subsequent changes of flight rules
 */
class AircraftMovementRuleType {
}
exports.AircraftMovementRuleType = AircraftMovementRuleType;
/**
 * The type of flight when so required by the appropriate ATS authority. ICAO Doc 4444.
 * S if scheduled air service
 * N if non-scheduled air transport operation
 * G if general aviation
 * M if military
 * X if other than any of the defined categories above.
 */
class AircraftMovementType {
}
exports.AircraftMovementType = AircraftMovementType;
class DinDinghy {
}
exports.DinDinghy = DinDinghy;
class AircraftMovementConstraint {
}
exports.AircraftMovementConstraint = AircraftMovementConstraint;
class AircraftMovementEmergency {
}
exports.AircraftMovementEmergency = AircraftMovementEmergency;
class AircraftMovementIdentification {
}
exports.AircraftMovementIdentification = AircraftMovementIdentification;
class RouteConstraint {
}
exports.RouteConstraint = RouteConstraint;
class AircraftTransportFormation {
}
exports.AircraftTransportFormation = AircraftTransportFormation;
class PackageGroupType {
}
exports.PackageGroupType = PackageGroupType;
class CargoItem {
}
exports.CargoItem = CargoItem;
class MeteorologicalEnvironment {
}
exports.MeteorologicalEnvironment = MeteorologicalEnvironment;
class CargoItemType {
}
exports.CargoItemType = CargoItemType;
//# sourceMappingURL=ACRISFlight.js.map